{"ast":null,"code":"import newsService from './newsService';\nimport webSearchService from './webSearch';\nclass AIService {\n  async processUserMessage(userMessage, windowData, conversationHistory = []) {\n    try {\n      console.log('ü§ñ Processing user message:', userMessage);\n\n      // Handle automatic web search for questions\n      const searchResult = await this.handleAutomaticSearch(userMessage);\n      if (searchResult) {\n        console.log('üåê Returning web search result');\n        return searchResult;\n      }\n\n      // Handle news requests\n      const newsResult = await this.handleNewsRequest(userMessage);\n      if (newsResult) {\n        console.log('üì∞ Returning news result');\n        return newsResult;\n      }\n\n      // Handle special window types\n      if (windowData.id === 'news') {\n        if (userMessage.toLowerCase().includes('latest') || userMessage.toLowerCase().includes('news') || userMessage.toLowerCase().includes('today') || userMessage.toLowerCase().includes('headlines')) {\n          console.log('üì∞ Fetching latest news');\n          const articles = await newsService.getTopHeadlines(windowData.newsTopic || 'technology');\n          return newsService.formatNewsForChat(articles);\n        } else {\n          console.log('üîç Searching news for:', userMessage);\n          const articles = await newsService.searchNews(userMessage);\n          return newsService.formatNewsForChat(articles);\n        }\n      }\n      if (windowData.id === 'workout') {\n        if (userMessage.toLowerCase().includes('plan') || userMessage.toLowerCase().includes('generate')) {\n          console.log('üí™ Generating workout plan');\n          return this.getMockWorkoutPlan();\n        }\n      }\n\n      // For other messages, return a mock response\n      console.log('üí¨ Returning mock response');\n      return this.getMockResponse(userMessage, windowData.title, conversationHistory);\n    } catch (error) {\n      console.error('‚ùå AI Service Error:', error);\n      return `Sorry, I encountered an error: ${error.message}. Please try rephrasing your question.`;\n    }\n  }\n  async handleAutomaticSearch(userMessage) {\n    // Detect questions that likely need web search\n    const questionPatterns = [/^(what|who|where|when|why|how|which|can you|could you|tell me about|explain|define|meaning of)/i, /(latest|recent|current|today's|breaking|price of|cost of|population of|statistics)/i];\n    const isQuestion = questionPatterns.some(pattern => pattern.test(userMessage));\n    if (isQuestion) {\n      const cleanQuery = this.cleanSearchQuery(userMessage);\n      console.log('üîç Detected question, searching for:', cleanQuery);\n      const results = await webSearchService.search(cleanQuery);\n      if (results && results.length > 0) {\n        return webSearchService.formatSearchResults(results);\n      }\n    }\n    return null;\n  }\n  async handleNewsRequest(userMessage) {\n    const newsKeywords = ['latest news', 'current news', 'recent news', 'news about', 'news on', 'what\\'s happening', 'breaking news', 'today\\'s news'];\n    const isNewsRequest = newsKeywords.some(keyword => userMessage.toLowerCase().includes(keyword));\n    if (isNewsRequest) {\n      console.log('üì∞ Detected news request:', userMessage);\n      let searchTerm = userMessage;\n      newsKeywords.forEach(keyword => {\n        searchTerm = searchTerm.replace(new RegExp(keyword, 'gi'), '').trim();\n      });\n      if (searchTerm === '') {\n        searchTerm = 'latest';\n      }\n      const articles = await newsService.searchNews(searchTerm);\n      return newsService.formatNewsForChat(articles);\n    }\n    return null;\n  }\n  cleanSearchQuery(query) {\n    return query.replace(/^(what is|who is|where is|when is|why is|how is|can you|could you|tell me|explain|define|meaning of|information about|facts about|details about)/i, '').replace(/\\?$/g, '').trim();\n  }\n  getMockWorkoutPlan() {\n    return `Here's your personalized 4-day workout plan:\n    \n**Day 1: Chest & Triceps**\n‚Ä¢ Bench Press: 3 sets x 8-12 reps\n‚Ä¢ Incline Dumbbell Press: 3 sets x 10-12 reps\n‚Ä¢ Tricep Dips: 3 sets x 10-15 reps\n‚Ä¢ Cable Flyes: 3 sets x 12-15 reps\n\n**Day 2: Back & Biceps**\n‚Ä¢ Pull-ups: 3 sets x 8-12 reps\n‚Ä¢ Bent-over Rows: 3 sets x 10-12 reps\n‚Ä¢ Barbell Curls: 3 sets x 10-12 reps\n‚Ä¢ Lat Pulldowns: 3 sets x 12-15 reps\n\n**Day 3: Legs & Shoulders**\n‚Ä¢ Squats: 3 sets x 8-12 reps\n‚Ä¢ Deadlifts: 3 sets x 6-10 reps\n‚Ä¢ Military Press: 3 sets x 8-12 reps\n‚Ä¢ Leg Curls: 3 sets x 10-15 reps\n\n**Day 4: Core & Cardio**\n‚Ä¢ Plank: 3 sets x 30-60 seconds\n‚Ä¢ Russian Twists: 3 sets x 20 reps\n‚Ä¢ 30-minute moderate cardio session\n‚Ä¢ Stretching routine: 15 minutes`;\n  }\n  getMockResponse(userMessage, windowTitle, conversationHistory) {\n    // Simple mock responses based on context\n    const responses = [`I understand you're asking about \"${userMessage}\" in the context of ${windowTitle}. How can I help you further with this topic?`, `That's an interesting point about \"${userMessage}\". In the context of ${windowTitle}, what specific information are you looking for?`, `Regarding \"${userMessage}\" in your ${windowTitle} context, I can provide more details if you'd like. What aspect interests you most?`, `I've processed your query about \"${userMessage}\" in ${windowTitle}. Would you like me to elaborate on any particular aspect?`, `Thanks for sharing that about \"${userMessage}\" in your ${windowTitle} workspace. How else can I assist you today?`];\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n  async handleSpecialAction(action, windowData) {\n    try {\n      switch (action) {\n        case 'fetchNews':\n          console.log('üì∞ Fetching latest news via special action');\n          const articles = await newsService.getTopHeadlines(windowData.newsTopic || 'technology');\n          return newsService.formatNewsForChat(articles);\n        case 'generatePlan':\n          console.log('üí™ Generating workout plan via special action');\n          return this.getMockWorkoutPlan();\n        case 'toggleNotify':\n          return \"Price change notifications setting has been updated successfully!\";\n        default:\n          return \"Action completed successfully!\";\n      }\n    } catch (error) {\n      console.error('‚ùå Special Action Error:', error);\n      return `Sorry, I encountered an error processing your request: ${error.message}`;\n    }\n  }\n}\nexport default new AIService();","map":{"version":3,"names":["newsService","webSearchService","AIService","processUserMessage","userMessage","windowData","conversationHistory","console","log","searchResult","handleAutomaticSearch","newsResult","handleNewsRequest","id","toLowerCase","includes","articles","getTopHeadlines","newsTopic","formatNewsForChat","searchNews","getMockWorkoutPlan","getMockResponse","title","error","message","questionPatterns","isQuestion","some","pattern","test","cleanQuery","cleanSearchQuery","results","search","length","formatSearchResults","newsKeywords","isNewsRequest","keyword","searchTerm","forEach","replace","RegExp","trim","query","windowTitle","responses","Math","floor","random","handleSpecialAction","action"],"sources":["C:/Users/Click/desktop/smartchat-dashboard/src/utils/aiService.js"],"sourcesContent":["import newsService from './newsService';\r\nimport webSearchService from './webSearch';\r\n\r\nclass AIService {\r\n  async processUserMessage(userMessage, windowData, conversationHistory = []) {\r\n    try {\r\n      console.log('ü§ñ Processing user message:', userMessage);\r\n      \r\n      // Handle automatic web search for questions\r\n      const searchResult = await this.handleAutomaticSearch(userMessage);\r\n      if (searchResult) {\r\n        console.log('üåê Returning web search result');\r\n        return searchResult;\r\n      }\r\n\r\n      // Handle news requests\r\n      const newsResult = await this.handleNewsRequest(userMessage);\r\n      if (newsResult) {\r\n        console.log('üì∞ Returning news result');\r\n        return newsResult;\r\n      }\r\n\r\n      // Handle special window types\r\n      if (windowData.id === 'news') {\r\n        if (userMessage.toLowerCase().includes('latest') || \r\n            userMessage.toLowerCase().includes('news') ||\r\n            userMessage.toLowerCase().includes('today') ||\r\n            userMessage.toLowerCase().includes('headlines')) {\r\n          console.log('üì∞ Fetching latest news');\r\n          const articles = await newsService.getTopHeadlines(windowData.newsTopic || 'technology');\r\n          return newsService.formatNewsForChat(articles);\r\n        } else {\r\n          console.log('üîç Searching news for:', userMessage);\r\n          const articles = await newsService.searchNews(userMessage);\r\n          return newsService.formatNewsForChat(articles);\r\n        }\r\n      }\r\n\r\n      if (windowData.id === 'workout') {\r\n        if (userMessage.toLowerCase().includes('plan') || \r\n            userMessage.toLowerCase().includes('generate')) {\r\n          console.log('üí™ Generating workout plan');\r\n          return this.getMockWorkoutPlan();\r\n        }\r\n      }\r\n\r\n      // For other messages, return a mock response\r\n      console.log('üí¨ Returning mock response');\r\n      return this.getMockResponse(userMessage, windowData.title, conversationHistory);\r\n    } catch (error) {\r\n      console.error('‚ùå AI Service Error:', error);\r\n      return `Sorry, I encountered an error: ${error.message}. Please try rephrasing your question.`;\r\n    }\r\n  }\r\n\r\n  async handleAutomaticSearch(userMessage) {\r\n    // Detect questions that likely need web search\r\n    const questionPatterns = [\r\n      /^(what|who|where|when|why|how|which|can you|could you|tell me about|explain|define|meaning of)/i,\r\n      /(latest|recent|current|today's|breaking|price of|cost of|population of|statistics)/i\r\n    ];\r\n\r\n    const isQuestion = questionPatterns.some(pattern => pattern.test(userMessage));\r\n    \r\n    if (isQuestion) {\r\n      const cleanQuery = this.cleanSearchQuery(userMessage);\r\n      console.log('üîç Detected question, searching for:', cleanQuery);\r\n      const results = await webSearchService.search(cleanQuery);\r\n      if (results && results.length > 0) {\r\n        return webSearchService.formatSearchResults(results);\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  async handleNewsRequest(userMessage) {\r\n    const newsKeywords = [\r\n      'latest news', 'current news', 'recent news', \r\n      'news about', 'news on', 'what\\'s happening',\r\n      'breaking news', 'today\\'s news'\r\n    ];\r\n    \r\n    const isNewsRequest = newsKeywords.some(keyword => \r\n      userMessage.toLowerCase().includes(keyword)\r\n    );\r\n    \r\n    if (isNewsRequest) {\r\n      console.log('üì∞ Detected news request:', userMessage);\r\n      let searchTerm = userMessage;\r\n      newsKeywords.forEach(keyword => {\r\n        searchTerm = searchTerm.replace(new RegExp(keyword, 'gi'), '').trim();\r\n      });\r\n      \r\n      if (searchTerm === '') {\r\n        searchTerm = 'latest';\r\n      }\r\n      \r\n      const articles = await newsService.searchNews(searchTerm);\r\n      return newsService.formatNewsForChat(articles);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  cleanSearchQuery(query) {\r\n    return query\r\n      .replace(/^(what is|who is|where is|when is|why is|how is|can you|could you|tell me|explain|define|meaning of|information about|facts about|details about)/i, '')\r\n      .replace(/\\?$/g, '')\r\n      .trim();\r\n  }\r\n\r\n  getMockWorkoutPlan() {\r\n    return `Here's your personalized 4-day workout plan:\r\n    \r\n**Day 1: Chest & Triceps**\r\n‚Ä¢ Bench Press: 3 sets x 8-12 reps\r\n‚Ä¢ Incline Dumbbell Press: 3 sets x 10-12 reps\r\n‚Ä¢ Tricep Dips: 3 sets x 10-15 reps\r\n‚Ä¢ Cable Flyes: 3 sets x 12-15 reps\r\n\r\n**Day 2: Back & Biceps**\r\n‚Ä¢ Pull-ups: 3 sets x 8-12 reps\r\n‚Ä¢ Bent-over Rows: 3 sets x 10-12 reps\r\n‚Ä¢ Barbell Curls: 3 sets x 10-12 reps\r\n‚Ä¢ Lat Pulldowns: 3 sets x 12-15 reps\r\n\r\n**Day 3: Legs & Shoulders**\r\n‚Ä¢ Squats: 3 sets x 8-12 reps\r\n‚Ä¢ Deadlifts: 3 sets x 6-10 reps\r\n‚Ä¢ Military Press: 3 sets x 8-12 reps\r\n‚Ä¢ Leg Curls: 3 sets x 10-15 reps\r\n\r\n**Day 4: Core & Cardio**\r\n‚Ä¢ Plank: 3 sets x 30-60 seconds\r\n‚Ä¢ Russian Twists: 3 sets x 20 reps\r\n‚Ä¢ 30-minute moderate cardio session\r\n‚Ä¢ Stretching routine: 15 minutes`;\r\n  }\r\n\r\n  getMockResponse(userMessage, windowTitle, conversationHistory) {\r\n    // Simple mock responses based on context\r\n    const responses = [\r\n      `I understand you're asking about \"${userMessage}\" in the context of ${windowTitle}. How can I help you further with this topic?`,\r\n      `That's an interesting point about \"${userMessage}\". In the context of ${windowTitle}, what specific information are you looking for?`,\r\n      `Regarding \"${userMessage}\" in your ${windowTitle} context, I can provide more details if you'd like. What aspect interests you most?`,\r\n      `I've processed your query about \"${userMessage}\" in ${windowTitle}. Would you like me to elaborate on any particular aspect?`,\r\n      `Thanks for sharing that about \"${userMessage}\" in your ${windowTitle} workspace. How else can I assist you today?`\r\n    ];\r\n    \r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  }\r\n\r\n  async handleSpecialAction(action, windowData) {\r\n    try {\r\n      switch (action) {\r\n        case 'fetchNews':\r\n          console.log('üì∞ Fetching latest news via special action');\r\n          const articles = await newsService.getTopHeadlines(windowData.newsTopic || 'technology');\r\n          return newsService.formatNewsForChat(articles);\r\n          \r\n        case 'generatePlan':\r\n          console.log('üí™ Generating workout plan via special action');\r\n          return this.getMockWorkoutPlan();\r\n          \r\n        case 'toggleNotify':\r\n          return \"Price change notifications setting has been updated successfully!\";\r\n          \r\n        default:\r\n          return \"Action completed successfully!\";\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Special Action Error:', error);\r\n      return `Sorry, I encountered an error processing your request: ${error.message}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AIService();"],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,gBAAgB,MAAM,aAAa;AAE1C,MAAMC,SAAS,CAAC;EACd,MAAMC,kBAAkBA,CAACC,WAAW,EAAEC,UAAU,EAAEC,mBAAmB,GAAG,EAAE,EAAE;IAC1E,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEJ,WAAW,CAAC;;MAEvD;MACA,MAAMK,YAAY,GAAG,MAAM,IAAI,CAACC,qBAAqB,CAACN,WAAW,CAAC;MAClE,IAAIK,YAAY,EAAE;QAChBF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C,OAAOC,YAAY;MACrB;;MAEA;MACA,MAAME,UAAU,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACR,WAAW,CAAC;MAC5D,IAAIO,UAAU,EAAE;QACdJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC,OAAOG,UAAU;MACnB;;MAEA;MACA,IAAIN,UAAU,CAACQ,EAAE,KAAK,MAAM,EAAE;QAC5B,IAAIT,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAC5CX,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAC1CX,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC3CX,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;UACnDR,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;UACtC,MAAMQ,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,eAAe,CAACZ,UAAU,CAACa,SAAS,IAAI,YAAY,CAAC;UACxF,OAAOlB,WAAW,CAACmB,iBAAiB,CAACH,QAAQ,CAAC;QAChD,CAAC,MAAM;UACLT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEJ,WAAW,CAAC;UAClD,MAAMY,QAAQ,GAAG,MAAMhB,WAAW,CAACoB,UAAU,CAAChB,WAAW,CAAC;UAC1D,OAAOJ,WAAW,CAACmB,iBAAiB,CAACH,QAAQ,CAAC;QAChD;MACF;MAEA,IAAIX,UAAU,CAACQ,EAAE,KAAK,SAAS,EAAE;QAC/B,IAAIT,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAC1CX,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UAClDR,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;UACzC,OAAO,IAAI,CAACa,kBAAkB,CAAC,CAAC;QAClC;MACF;;MAEA;MACAd,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,OAAO,IAAI,CAACc,eAAe,CAAClB,WAAW,EAAEC,UAAU,CAACkB,KAAK,EAAEjB,mBAAmB,CAAC;IACjF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO,kCAAkCA,KAAK,CAACC,OAAO,wCAAwC;IAChG;EACF;EAEA,MAAMf,qBAAqBA,CAACN,WAAW,EAAE;IACvC;IACA,MAAMsB,gBAAgB,GAAG,CACvB,iGAAiG,EACjG,qFAAqF,CACtF;IAED,MAAMC,UAAU,GAAGD,gBAAgB,CAACE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC1B,WAAW,CAAC,CAAC;IAE9E,IAAIuB,UAAU,EAAE;MACd,MAAMI,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAAC5B,WAAW,CAAC;MACrDG,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEuB,UAAU,CAAC;MAC/D,MAAME,OAAO,GAAG,MAAMhC,gBAAgB,CAACiC,MAAM,CAACH,UAAU,CAAC;MACzD,IAAIE,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;QACjC,OAAOlC,gBAAgB,CAACmC,mBAAmB,CAACH,OAAO,CAAC;MACtD;IACF;IAEA,OAAO,IAAI;EACb;EAEA,MAAMrB,iBAAiBA,CAACR,WAAW,EAAE;IACnC,MAAMiC,YAAY,GAAG,CACnB,aAAa,EAAE,cAAc,EAAE,aAAa,EAC5C,YAAY,EAAE,SAAS,EAAE,mBAAmB,EAC5C,eAAe,EAAE,eAAe,CACjC;IAED,MAAMC,aAAa,GAAGD,YAAY,CAACT,IAAI,CAACW,OAAO,IAC7CnC,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACwB,OAAO,CAC5C,CAAC;IAED,IAAID,aAAa,EAAE;MACjB/B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,WAAW,CAAC;MACrD,IAAIoC,UAAU,GAAGpC,WAAW;MAC5BiC,YAAY,CAACI,OAAO,CAACF,OAAO,IAAI;QAC9BC,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,IAAIC,MAAM,CAACJ,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAACK,IAAI,CAAC,CAAC;MACvE,CAAC,CAAC;MAEF,IAAIJ,UAAU,KAAK,EAAE,EAAE;QACrBA,UAAU,GAAG,QAAQ;MACvB;MAEA,MAAMxB,QAAQ,GAAG,MAAMhB,WAAW,CAACoB,UAAU,CAACoB,UAAU,CAAC;MACzD,OAAOxC,WAAW,CAACmB,iBAAiB,CAACH,QAAQ,CAAC;IAChD;IAEA,OAAO,IAAI;EACb;EAEAgB,gBAAgBA,CAACa,KAAK,EAAE;IACtB,OAAOA,KAAK,CACTH,OAAO,CAAC,mJAAmJ,EAAE,EAAE,CAAC,CAChKA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBE,IAAI,CAAC,CAAC;EACX;EAEAvB,kBAAkBA,CAAA,EAAG;IACnB,OAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;EAC/B;EAEAC,eAAeA,CAAClB,WAAW,EAAE0C,WAAW,EAAExC,mBAAmB,EAAE;IAC7D;IACA,MAAMyC,SAAS,GAAG,CAChB,qCAAqC3C,WAAW,uBAAuB0C,WAAW,+CAA+C,EACjI,sCAAsC1C,WAAW,wBAAwB0C,WAAW,kDAAkD,EACtI,cAAc1C,WAAW,aAAa0C,WAAW,qFAAqF,EACtI,oCAAoC1C,WAAW,QAAQ0C,WAAW,4DAA4D,EAC9H,kCAAkC1C,WAAW,aAAa0C,WAAW,8CAA8C,CACpH;IAED,OAAOC,SAAS,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,SAAS,CAACZ,MAAM,CAAC,CAAC;EAChE;EAEA,MAAMgB,mBAAmBA,CAACC,MAAM,EAAE/C,UAAU,EAAE;IAC5C,IAAI;MACF,QAAQ+C,MAAM;QACZ,KAAK,WAAW;UACd7C,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;UACzD,MAAMQ,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,eAAe,CAACZ,UAAU,CAACa,SAAS,IAAI,YAAY,CAAC;UACxF,OAAOlB,WAAW,CAACmB,iBAAiB,CAACH,QAAQ,CAAC;QAEhD,KAAK,cAAc;UACjBT,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;UAC5D,OAAO,IAAI,CAACa,kBAAkB,CAAC,CAAC;QAElC,KAAK,cAAc;UACjB,OAAO,mEAAmE;QAE5E;UACE,OAAO,gCAAgC;MAC3C;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,0DAA0DA,KAAK,CAACC,OAAO,EAAE;IAClF;EACF;AACF;AAEA,eAAe,IAAIvB,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}