{"ast":null,"code":"class WebSearchService {\n  async search(query, maxResults = 5) {\n    try {\n      console.log('🔍 Web searching for:', query);\n\n      // Using DuckDuckGo Instant Answer API (free, no key required)\n      const encodedQuery = encodeURIComponent(query);\n      const url = `https://api.duckduckgo.com/?q=${encodedQuery}&format=json&no_html=1&skip_disambig=1`;\n\n      // Try direct fetch first\n      try {\n        const response = await fetch(url);\n        if (response.ok) {\n          const data = await response.json();\n          console.log('DuckDuckGo Direct Response:', data);\n          return this.processDuckDuckGoResults(data, maxResults);\n        }\n      } catch (directError) {\n        console.log('Direct fetch failed, trying with proxy...');\n      }\n\n      // Try with CORS proxy if direct fails\n      const proxies = ['https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://api.allorigins.win/get?url='];\n      for (const proxy of proxies) {\n        try {\n          console.log(`Trying proxy: ${proxy}`);\n          const response = await fetch(proxy + encodeURIComponent(url));\n          if (response.ok) {\n            const rawData = await response.json();\n            // Handle different proxy response formats\n            const data = rawData.contents ? JSON.parse(rawData.contents) : rawData;\n            console.log('DuckDuckGo Proxy Response:', data);\n            return this.processDuckDuckGoResults(data, maxResults);\n          }\n        } catch (proxyError) {\n          console.log(`Proxy ${proxy} failed:`, proxyError);\n          continue;\n        }\n      }\n      console.log('All web search attempts failed');\n      return [];\n    } catch (error) {\n      console.error('Web Search Error:', error);\n      return [];\n    }\n  }\n  processDuckDuckGoResults(data, maxResults) {\n    const results = [];\n\n    // Add instant answer if available\n    if (data.Answer) {\n      results.push({\n        title: `Quick Answer`,\n        snippet: data.Answer,\n        url: data.AbstractURL || '#'\n      });\n    }\n\n    // Add related topics\n    if (data.RelatedTopics && data.RelatedTopics.length > 0) {\n      const relatedResults = data.RelatedTopics.slice(0, maxResults - results.length).filter(topic => topic.FirstURL && topic.Text).map(topic => ({\n        title: topic.Text,\n        snippet: '',\n        url: topic.FirstURL\n      }));\n      results.push(...relatedResults);\n    }\n    return results;\n  }\n  formatSearchResults(results) {\n    if (results.length === 0) {\n      return \"Sorry, I couldn't find any results for that search. Please try rephrasing your question or check your internet connection.\";\n    }\n    let response = \"I found this information for you:\\n\\n\";\n    results.forEach((result, index) => {\n      response += `${index + 1}. **${result.title}**\\n`;\n      if (result.snippet) {\n        response += `   ${result.snippet}\\n`;\n      }\n      response += `   Source: ${result.url}\\n\\n`;\n    });\n    return response;\n  }\n}\nexport default new WebSearchService();","map":{"version":3,"names":["WebSearchService","search","query","maxResults","console","log","encodedQuery","encodeURIComponent","url","response","fetch","ok","data","json","processDuckDuckGoResults","directError","proxies","proxy","rawData","contents","JSON","parse","proxyError","error","results","Answer","push","title","snippet","AbstractURL","RelatedTopics","length","relatedResults","slice","filter","topic","FirstURL","Text","map","formatSearchResults","forEach","result","index"],"sources":["C:/Users/Click/desktop/smartchat-dashboard/src/utils/webSearch.js"],"sourcesContent":["class WebSearchService {\r\n  async search(query, maxResults = 5) {\r\n    try {\r\n      console.log('🔍 Web searching for:', query);\r\n      \r\n      // Using DuckDuckGo Instant Answer API (free, no key required)\r\n      const encodedQuery = encodeURIComponent(query);\r\n      const url = `https://api.duckduckgo.com/?q=${encodedQuery}&format=json&no_html=1&skip_disambig=1`;\r\n      \r\n      // Try direct fetch first\r\n      try {\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          console.log('DuckDuckGo Direct Response:', data);\r\n          return this.processDuckDuckGoResults(data, maxResults);\r\n        }\r\n      } catch (directError) {\r\n        console.log('Direct fetch failed, trying with proxy...');\r\n      }\r\n      \r\n      // Try with CORS proxy if direct fails\r\n      const proxies = [\r\n        'https://corsproxy.io/?',\r\n        'https://thingproxy.freeboard.io/fetch/',\r\n        'https://api.allorigins.win/get?url='\r\n      ];\r\n      \r\n      for (const proxy of proxies) {\r\n        try {\r\n          console.log(`Trying proxy: ${proxy}`);\r\n          const response = await fetch(proxy + encodeURIComponent(url));\r\n          \r\n          if (response.ok) {\r\n            const rawData = await response.json();\r\n            // Handle different proxy response formats\r\n            const data = rawData.contents ? JSON.parse(rawData.contents) : rawData;\r\n            console.log('DuckDuckGo Proxy Response:', data);\r\n            return this.processDuckDuckGoResults(data, maxResults);\r\n          }\r\n        } catch (proxyError) {\r\n          console.log(`Proxy ${proxy} failed:`, proxyError);\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      console.log('All web search attempts failed');\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Web Search Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  processDuckDuckGoResults(data, maxResults) {\r\n    const results = [];\r\n    \r\n    // Add instant answer if available\r\n    if (data.Answer) {\r\n      results.push({\r\n        title: `Quick Answer`,\r\n        snippet: data.Answer,\r\n        url: data.AbstractURL || '#'\r\n      });\r\n    }\r\n    \r\n    // Add related topics\r\n    if (data.RelatedTopics && data.RelatedTopics.length > 0) {\r\n      const relatedResults = data.RelatedTopics\r\n        .slice(0, maxResults - results.length)\r\n        .filter(topic => topic.FirstURL && topic.Text)\r\n        .map(topic => ({\r\n          title: topic.Text,\r\n          snippet: '',\r\n          url: topic.FirstURL\r\n        }));\r\n      results.push(...relatedResults);\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  formatSearchResults(results) {\r\n    if (results.length === 0) {\r\n      return \"Sorry, I couldn't find any results for that search. Please try rephrasing your question or check your internet connection.\";\r\n    }\r\n    \r\n    let response = \"I found this information for you:\\n\\n\";\r\n    results.forEach((result, index) => {\r\n      response += `${index + 1}. **${result.title}**\\n`;\r\n      if (result.snippet) {\r\n        response += `   ${result.snippet}\\n`;\r\n      }\r\n      response += `   Source: ${result.url}\\n\\n`;\r\n    });\r\n    \r\n    return response;\r\n  }\r\n}\r\n\r\nexport default new WebSearchService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}