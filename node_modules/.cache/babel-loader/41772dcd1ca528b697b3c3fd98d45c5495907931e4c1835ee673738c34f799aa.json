{"ast":null,"code":"class NewsService {\n  constructor() {\n    this.apiKey = process.env.REACT_APP_NEWSAPI_KEY;\n    this.apiUrl = 'https://newsapi.org/v2';\n  }\n  async getTopHeadlines(category = 'technology', pageSize = 5) {\n    try {\n      console.log('📰 Fetching top headlines for category:', category);\n\n      // Try multiple CORS proxies\n      const proxies = ['https://api.allorigins.win/get?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/'];\n      const targetUrl = `${this.apiUrl}/top-headlines?category=${category}&pageSize=${pageSize}&apiKey=${this.apiKey}`;\n      for (const proxy of proxies) {\n        try {\n          console.log(`Trying proxy: ${proxy}`);\n          const response = await fetch(proxy + encodeURIComponent(targetUrl));\n          if (response.ok) {\n            const data = await response.json();\n            console.log('News API Response:', data);\n            if (data.status === 'ok' && data.articles) {\n              return data.articles.map(article => {\n                var _article$source;\n                return {\n                  title: article.title,\n                  description: article.description || '',\n                  url: article.url,\n                  publishedAt: article.publishedAt,\n                  source: ((_article$source = article.source) === null || _article$source === void 0 ? void 0 : _article$source.name) || 'Unknown'\n                };\n              });\n            }\n          }\n        } catch (proxyError) {\n          console.log(`Proxy ${proxy} failed:`, proxyError);\n          continue;\n        }\n      }\n\n      // If all proxies fail, return empty array\n      console.log('All proxies failed for News API');\n      return [];\n    } catch (error) {\n      console.error('News API Error:', error);\n      return [];\n    }\n  }\n  async searchNews(query, pageSize = 5) {\n    try {\n      console.log('🔍 Searching news for query:', query);\n\n      // Try multiple CORS proxies\n      const proxies = ['https://api.allorigins.win/get?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/'];\n      const targetUrl = `${this.apiUrl}/everything?q=${encodeURIComponent(query)}&pageSize=${pageSize}&apiKey=${this.apiKey}`;\n      for (const proxy of proxies) {\n        try {\n          console.log(`Trying proxy: ${proxy}`);\n          const response = await fetch(proxy + encodeURIComponent(targetUrl));\n          if (response.ok) {\n            const rawData = await response.json();\n            // Handle different proxy response formats\n            const data = rawData.contents ? JSON.parse(rawData.contents) : rawData;\n            console.log('News Search Response:', data);\n            if (data.status === 'ok' && data.articles) {\n              return data.articles.map(article => {\n                var _article$source2;\n                return {\n                  title: article.title,\n                  description: article.description || '',\n                  url: article.url,\n                  publishedAt: article.publishedAt,\n                  source: ((_article$source2 = article.source) === null || _article$source2 === void 0 ? void 0 : _article$source2.name) || 'Unknown'\n                };\n              });\n            }\n          }\n        } catch (proxyError) {\n          console.log(`Proxy ${proxy} failed:`, proxyError);\n          continue;\n        }\n      }\n\n      // If all proxies fail, return empty array\n      console.log('All proxies failed for News Search');\n      return [];\n    } catch (error) {\n      console.error('News Search Error:', error);\n      return [];\n    }\n  }\n  formatNewsForChat(articles) {\n    if (articles.length === 0) {\n      return \"Sorry, I couldn't find any recent news on that topic. Please try a different search term.\";\n    }\n    let response = \"Here are the latest news updates:\\n\\n\";\n    articles.forEach((article, index) => {\n      const date = new Date(article.publishedAt).toLocaleDateString();\n      response += `${index + 1}. **${article.title}**\\n`;\n      response += `   ${article.description}\\n`;\n      response += `   Source: ${article.source} | ${date}\\n\\n`;\n    });\n    return response;\n  }\n}\nexport default new NewsService();","map":{"version":3,"names":["NewsService","constructor","apiKey","process","env","REACT_APP_NEWSAPI_KEY","apiUrl","getTopHeadlines","category","pageSize","console","log","proxies","targetUrl","proxy","response","fetch","encodeURIComponent","ok","data","json","status","articles","map","article","_article$source","title","description","url","publishedAt","source","name","proxyError","error","searchNews","query","rawData","contents","JSON","parse","_article$source2","formatNewsForChat","length","forEach","index","date","Date","toLocaleDateString"],"sources":["C:/Users/Click/desktop/smartchat-dashboard/src/utils/newsService.js"],"sourcesContent":["class NewsService {\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_NEWSAPI_KEY;\r\n    this.apiUrl = 'https://newsapi.org/v2';\r\n  }\r\n\r\n  async getTopHeadlines(category = 'technology', pageSize = 5) {\r\n    try {\r\n      console.log('📰 Fetching top headlines for category:', category);\r\n      \r\n      // Try multiple CORS proxies\r\n      const proxies = [\r\n        'https://api.allorigins.win/get?url=',\r\n        'https://corsproxy.io/?',\r\n        'https://thingproxy.freeboard.io/fetch/'\r\n      ];\r\n      \r\n      const targetUrl = `${this.apiUrl}/top-headlines?category=${category}&pageSize=${pageSize}&apiKey=${this.apiKey}`;\r\n      \r\n      for (const proxy of proxies) {\r\n        try {\r\n          console.log(`Trying proxy: ${proxy}`);\r\n          const response = await fetch(proxy + encodeURIComponent(targetUrl));\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            console.log('News API Response:', data);\r\n            \r\n            if (data.status === 'ok' && data.articles) {\r\n              return data.articles.map(article => ({\r\n                title: article.title,\r\n                description: article.description || '',\r\n                url: article.url,\r\n                publishedAt: article.publishedAt,\r\n                source: article.source?.name || 'Unknown'\r\n              }));\r\n            }\r\n          }\r\n        } catch (proxyError) {\r\n          console.log(`Proxy ${proxy} failed:`, proxyError);\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      // If all proxies fail, return empty array\r\n      console.log('All proxies failed for News API');\r\n      return [];\r\n    } catch (error) {\r\n      console.error('News API Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async searchNews(query, pageSize = 5) {\r\n    try {\r\n      console.log('🔍 Searching news for query:', query);\r\n      \r\n      // Try multiple CORS proxies\r\n      const proxies = [\r\n        'https://api.allorigins.win/get?url=',\r\n        'https://corsproxy.io/?',\r\n        'https://thingproxy.freeboard.io/fetch/'\r\n      ];\r\n      \r\n      const targetUrl = `${this.apiUrl}/everything?q=${encodeURIComponent(query)}&pageSize=${pageSize}&apiKey=${this.apiKey}`;\r\n      \r\n      for (const proxy of proxies) {\r\n        try {\r\n          console.log(`Trying proxy: ${proxy}`);\r\n          const response = await fetch(proxy + encodeURIComponent(targetUrl));\r\n          \r\n          if (response.ok) {\r\n            const rawData = await response.json();\r\n            // Handle different proxy response formats\r\n            const data = rawData.contents ? JSON.parse(rawData.contents) : rawData;\r\n            console.log('News Search Response:', data);\r\n            \r\n            if (data.status === 'ok' && data.articles) {\r\n              return data.articles.map(article => ({\r\n                title: article.title,\r\n                description: article.description || '',\r\n                url: article.url,\r\n                publishedAt: article.publishedAt,\r\n                source: article.source?.name || 'Unknown'\r\n              }));\r\n            }\r\n          }\r\n        } catch (proxyError) {\r\n          console.log(`Proxy ${proxy} failed:`, proxyError);\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      // If all proxies fail, return empty array\r\n      console.log('All proxies failed for News Search');\r\n      return [];\r\n    } catch (error) {\r\n      console.error('News Search Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  formatNewsForChat(articles) {\r\n    if (articles.length === 0) {\r\n      return \"Sorry, I couldn't find any recent news on that topic. Please try a different search term.\";\r\n    }\r\n    \r\n    let response = \"Here are the latest news updates:\\n\\n\";\r\n    articles.forEach((article, index) => {\r\n      const date = new Date(article.publishedAt).toLocaleDateString();\r\n      response += `${index + 1}. **${article.title}**\\n`;\r\n      response += `   ${article.description}\\n`;\r\n      response += `   Source: ${article.source} | ${date}\\n\\n`;\r\n    });\r\n    \r\n    return response;\r\n  }\r\n}\r\n\r\nexport default new NewsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}