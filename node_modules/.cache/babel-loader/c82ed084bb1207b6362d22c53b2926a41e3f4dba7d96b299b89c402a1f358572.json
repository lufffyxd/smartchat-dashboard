{"ast":null,"code":"class TaskManager {\n  createTaskFromText(text, dueDate = null) {\n    return {\n      id: Date.now(),\n      text: text,\n      completed: false,\n      due: dueDate || new Date().toISOString().split('T')[0],\n      createdAt: new Date().toISOString()\n    };\n  }\n  addTaskToWindow(windowId, task) {\n    const savedWindows = localStorage.getItem('smartchat_windows');\n    let windows = savedWindows ? JSON.parse(savedWindows) : [];\n    const tasksWindow = windows.find(w => w.id === 'tasks');\n    if (tasksWindow) {\n      if (!tasksWindow.tasks) tasksWindow.tasks = [];\n      tasksWindow.tasks.push(task);\n      localStorage.setItem('smartchat_windows', JSON.stringify(windows));\n      return true;\n    }\n    return false;\n  }\n}\nexport default new TaskManager();","map":{"version":3,"names":["TaskManager","createTaskFromText","text","dueDate","id","Date","now","completed","due","toISOString","split","createdAt","addTaskToWindow","windowId","task","savedWindows","localStorage","getItem","windows","JSON","parse","tasksWindow","find","w","tasks","push","setItem","stringify"],"sources":["C:/Users/Click/desktop/smartchat-dashboard/src/utils/taskManager.js"],"sourcesContent":["class TaskManager {\r\n  createTaskFromText(text, dueDate = null) {\r\n    return {\r\n      id: Date.now(),\r\n      text: text,\r\n      completed: false,\r\n      due: dueDate || new Date().toISOString().split('T')[0],\r\n      createdAt: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  addTaskToWindow(windowId, task) {\r\n    const savedWindows = localStorage.getItem('smartchat_windows');\r\n    let windows = savedWindows ? JSON.parse(savedWindows) : [];\r\n    \r\n    const tasksWindow = windows.find(w => w.id === 'tasks');\r\n    if (tasksWindow) {\r\n      if (!tasksWindow.tasks) tasksWindow.tasks = [];\r\n      tasksWindow.tasks.push(task);\r\n      localStorage.setItem('smartchat_windows', JSON.stringify(windows));\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n}\r\n\r\nexport default new TaskManager();"],"mappings":"AAAA,MAAMA,WAAW,CAAC;EAChBC,kBAAkBA,CAACC,IAAI,EAAEC,OAAO,GAAG,IAAI,EAAE;IACvC,OAAO;MACLC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdJ,IAAI,EAAEA,IAAI;MACVK,SAAS,EAAE,KAAK;MAChBC,GAAG,EAAEL,OAAO,IAAI,IAAIE,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtDC,SAAS,EAAE,IAAIN,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;IACpC,CAAC;EACH;EAEAG,eAAeA,CAACC,QAAQ,EAAEC,IAAI,EAAE;IAC9B,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;IAC9D,IAAIC,OAAO,GAAGH,YAAY,GAAGI,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC,GAAG,EAAE;IAE1D,MAAMM,WAAW,GAAGH,OAAO,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,EAAE,KAAK,OAAO,CAAC;IACvD,IAAIiB,WAAW,EAAE;MACf,IAAI,CAACA,WAAW,CAACG,KAAK,EAAEH,WAAW,CAACG,KAAK,GAAG,EAAE;MAC9CH,WAAW,CAACG,KAAK,CAACC,IAAI,CAACX,IAAI,CAAC;MAC5BE,YAAY,CAACU,OAAO,CAAC,mBAAmB,EAAEP,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;MAClE,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;AACF;AAEA,eAAe,IAAIlB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}