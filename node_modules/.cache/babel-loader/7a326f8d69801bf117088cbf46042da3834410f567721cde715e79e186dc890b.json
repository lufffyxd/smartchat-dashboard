{"ast":null,"code":"class WebSearchService {\n  async search(query, maxResults = 5) {\n    try {\n      // Using DuckDuckGo Instant Answer API (free, no key required)\n      const encodedQuery = encodeURIComponent(query);\n      const url = `https://api.duckduckgo.com/?q=${encodedQuery}&format=json&no_html=1&skip_disambig=1`;\n      const response = await fetch(url);\n      const data = await response.json();\n      const results = [];\n\n      // Add instant answer if available\n      if (data.Answer) {\n        results.push({\n          title: `Quick Answer: ${query}`,\n          snippet: data.Answer,\n          url: data.AbstractURL || '#'\n        });\n      }\n\n      // Add related topics\n      if (data.RelatedTopics && data.RelatedTopics.length > 0) {\n        const relatedResults = data.RelatedTopics.slice(0, maxResults - results.length).filter(topic => topic.FirstURL && topic.Text).map(topic => ({\n          title: topic.Text,\n          snippet: '',\n          url: topic.FirstURL\n        }));\n        results.push(...relatedResults);\n      }\n      return results;\n    } catch (error) {\n      console.error('Web Search Error:', error);\n      return [];\n    }\n  }\n  formatSearchResults(results) {\n    if (results.length === 0) {\n      return \"Sorry, I couldn't find any results for that search.\";\n    }\n    let response = \"I found this information for you:\\n\\n\";\n    results.forEach((result, index) => {\n      response += `${index + 1}. **${result.title}**\\n`;\n      if (result.snippet) {\n        response += `   ${result.snippet}\\n`;\n      }\n      response += `   Source: ${result.url}\\n\\n`;\n    });\n    return response;\n  }\n}\nexport default new WebSearchService();","map":{"version":3,"names":["WebSearchService","search","query","maxResults","encodedQuery","encodeURIComponent","url","response","fetch","data","json","results","Answer","push","title","snippet","AbstractURL","RelatedTopics","length","relatedResults","slice","filter","topic","FirstURL","Text","map","error","console","formatSearchResults","forEach","result","index"],"sources":["C:/Users/Click/desktop/smartchat-dashboard/src/utils/webSearch.js"],"sourcesContent":["class WebSearchService {\r\n  async search(query, maxResults = 5) {\r\n    try {\r\n      // Using DuckDuckGo Instant Answer API (free, no key required)\r\n      const encodedQuery = encodeURIComponent(query);\r\n      const url = `https://api.duckduckgo.com/?q=${encodedQuery}&format=json&no_html=1&skip_disambig=1`;\r\n      \r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      \r\n      const results = [];\r\n      \r\n      // Add instant answer if available\r\n      if (data.Answer) {\r\n        results.push({\r\n          title: `Quick Answer: ${query}`,\r\n          snippet: data.Answer,\r\n          url: data.AbstractURL || '#'\r\n        });\r\n      }\r\n      \r\n      // Add related topics\r\n      if (data.RelatedTopics && data.RelatedTopics.length > 0) {\r\n        const relatedResults = data.RelatedTopics\r\n          .slice(0, maxResults - results.length)\r\n          .filter(topic => topic.FirstURL && topic.Text)\r\n          .map(topic => ({\r\n            title: topic.Text,\r\n            snippet: '',\r\n            url: topic.FirstURL\r\n          }));\r\n        results.push(...relatedResults);\r\n      }\r\n      \r\n      return results;\r\n    } catch (error) {\r\n      console.error('Web Search Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  formatSearchResults(results) {\r\n    if (results.length === 0) {\r\n      return \"Sorry, I couldn't find any results for that search.\";\r\n    }\r\n    \r\n    let response = \"I found this information for you:\\n\\n\";\r\n    results.forEach((result, index) => {\r\n      response += `${index + 1}. **${result.title}**\\n`;\r\n      if (result.snippet) {\r\n        response += `   ${result.snippet}\\n`;\r\n      }\r\n      response += `   Source: ${result.url}\\n\\n`;\r\n    });\r\n    \r\n    return response;\r\n  }\r\n}\r\n\r\nexport default new WebSearchService();"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACrB,MAAMC,MAAMA,CAACC,KAAK,EAAEC,UAAU,GAAG,CAAC,EAAE;IAClC,IAAI;MACF;MACA,MAAMC,YAAY,GAAGC,kBAAkB,CAACH,KAAK,CAAC;MAC9C,MAAMI,GAAG,GAAG,iCAAiCF,YAAY,wCAAwC;MAEjG,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,MAAMC,OAAO,GAAG,EAAE;;MAElB;MACA,IAAIF,IAAI,CAACG,MAAM,EAAE;QACfD,OAAO,CAACE,IAAI,CAAC;UACXC,KAAK,EAAE,iBAAiBZ,KAAK,EAAE;UAC/Ba,OAAO,EAAEN,IAAI,CAACG,MAAM;UACpBN,GAAG,EAAEG,IAAI,CAACO,WAAW,IAAI;QAC3B,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIP,IAAI,CAACQ,aAAa,IAAIR,IAAI,CAACQ,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;QACvD,MAAMC,cAAc,GAAGV,IAAI,CAACQ,aAAa,CACtCG,KAAK,CAAC,CAAC,EAAEjB,UAAU,GAAGQ,OAAO,CAACO,MAAM,CAAC,CACrCG,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACE,IAAI,CAAC,CAC7CC,GAAG,CAACH,KAAK,KAAK;UACbR,KAAK,EAAEQ,KAAK,CAACE,IAAI;UACjBT,OAAO,EAAE,EAAE;UACXT,GAAG,EAAEgB,KAAK,CAACC;QACb,CAAC,CAAC,CAAC;QACLZ,OAAO,CAACE,IAAI,CAAC,GAAGM,cAAc,CAAC;MACjC;MAEA,OAAOR,OAAO;IAChB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,OAAO,EAAE;IACX;EACF;EAEAE,mBAAmBA,CAACjB,OAAO,EAAE;IAC3B,IAAIA,OAAO,CAACO,MAAM,KAAK,CAAC,EAAE;MACxB,OAAO,qDAAqD;IAC9D;IAEA,IAAIX,QAAQ,GAAG,uCAAuC;IACtDI,OAAO,CAACkB,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACjCxB,QAAQ,IAAI,GAAGwB,KAAK,GAAG,CAAC,OAAOD,MAAM,CAAChB,KAAK,MAAM;MACjD,IAAIgB,MAAM,CAACf,OAAO,EAAE;QAClBR,QAAQ,IAAI,MAAMuB,MAAM,CAACf,OAAO,IAAI;MACtC;MACAR,QAAQ,IAAI,cAAcuB,MAAM,CAACxB,GAAG,MAAM;IAC5C,CAAC,CAAC;IAEF,OAAOC,QAAQ;EACjB;AACF;AAEA,eAAe,IAAIP,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}